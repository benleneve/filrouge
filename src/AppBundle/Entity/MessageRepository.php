<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    
    //Récupérer les 5 derniers messages triés par date pour un destinataire
    public function findLastMessagesByUserEager($id) {
        return $this->createQueryBuilder('m')
                    ->addSelect('m')
                    ->addSelect('us')
                    ->addSelect('ur')
                    ->LeftJoin('m.sender', 'us')
                    ->LeftJoin('m.recipient', 'ur')
                    ->where('ur.id = :id')
                    ->setParameter('id', $id)
                    ->orderBy('m.creationDate', 'DESC')
                    ->setMaxResults(5)
                    ->getQuery()
                    ->getResult();
    }
    
    //Récupérer un message particulier
    public function findOneMessageEager($id) {
        return $this->createQueryBuilder('m')
                    ->addSelect('m')
                    ->addSelect('us')
                    ->addSelect('ur')
                    ->LeftJoin('m.sender', 'us')
                    ->LeftJoin('m.recipient', 'ur')
                    ->where('m.id = :id')
                    ->setParameter('id', $id)
                    ->getQuery()
                    ->getOneOrNullResult();
    }
    
    //Récupérer tous les messages par destinataire avec pagination
    public function findAllMessagesPageEager($page= 1, $maxPerPage = 20, $id) {
        $query = $this->createQueryBuilder('m')
                    ->addSelect('m')
                    ->addSelect('us')
                    ->addSelect('ur')
                    ->LeftJoin('m.sender', 'us')
                    ->LeftJoin('m.recipient', 'ur')
                    ->where('ur.id = :id')
                    ->setParameter('id', $id)
                    ->orderBy('m.creationDate', 'DESC');
        $query->setFirstResult(($page-1)*$maxPerPage)
              ->setMaxResults($maxPerPage);
        return new Paginator($query);      
    }
    
}
